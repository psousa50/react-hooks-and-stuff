{"ast":null,"code":"var _jsxFileName = \"/Users/pedrosousa/WorkEqual/Tests/react-hooks-and-stuff/client/src/components/ToDo.tsx\";\nimport React from \"react\";\nimport { useFetchToDo } from \"../api/hooks\";\nimport { useParams } from \"react-router\";\nexport const ToDo = () => {\n  const _useParams = useParams(),\n        id = _useParams.id;\n\n  const _useFetchToDo = useFetchToDo(parseInt(id)),\n        toDo = _useFetchToDo.toDo,\n        loading = _useFetchToDo.loading;\n\n  return !toDo || loading ? React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }, \"Loading...\") : React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, \"ToDo\"), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, toDo.title));\n};","map":{"version":3,"sources":["/Users/pedrosousa/WorkEqual/Tests/react-hooks-and-stuff/client/src/components/ToDo.tsx"],"names":["React","useFetchToDo","useParams","ToDo","id","parseInt","toDo","loading","title"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,QAA6B,cAA7B;AACA,SAASC,SAAT,QAA0B,cAA1B;AAEA,OAAO,MAAMC,IAAc,GAAG,MAAM;AAAA,qBACnBD,SAAS,EADU;AAAA,QAC1BE,EAD0B,cAC1BA,EAD0B;;AAAA,wBAGRH,YAAY,CAACI,QAAQ,CAACD,EAAD,CAAT,CAHJ;AAAA,QAG1BE,IAH0B,iBAG1BA,IAH0B;AAAA,QAGpBC,OAHoB,iBAGpBA,OAHoB;;AAKlC,SAAO,CAACD,IAAD,IAASC,OAAT,GACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAM,YAAN,CADK,GAGL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK,MAAL,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMD,IAAI,CAACE,KAAX,CAFF,CAHF;AAQD,CAbM","sourcesContent":["import React from \"react\"\nimport { useFetchToDo } from \"../api/hooks\"\nimport { useParams } from \"react-router\"\n\nexport const ToDo: React.FC = () => {\n  const { id } = useParams()\n\n  const { toDo, loading } = useFetchToDo(parseInt(id!))\n\n  return !toDo || loading ? (\n    <div>{\"Loading...\"}</div>\n  ) : (\n    <div>\n      <h2>{\"ToDo\"}</h2>\n      <div>{toDo.title}</div>\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}