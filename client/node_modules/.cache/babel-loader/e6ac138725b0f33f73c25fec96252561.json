{"ast":null,"code":"import{left,right}from\"fp-ts/lib/Either\";import{fromEither,tryCatch,chain}from\"fp-ts/lib/TaskEither\";export var actionOf=function actionOf(v){return fromEither(right(v));};export function actionErrorOf(error){return fromEither(left(error));}export var toAction=function toAction(lazyPromise){return tryCatch(lazyPromise,function(error){return error;});};export var chainLogTE=function chainLogTE(m,action){return chain(function(v){console.log(\"\".concat(m,\"=>\"),v);return action(v);});};","map":{"version":3,"sources":["/Users/pedrosousa/WorkEqual/Tests/react-hooks-and-stuff/client/src/common/actions.ts"],"names":["left","right","fromEither","tryCatch","chain","actionOf","v","actionErrorOf","error","toAction","lazyPromise","chainLogTE","m","action","console","log"],"mappings":"AAAA,OAASA,IAAT,CAAeC,KAAf,KAA4B,kBAA5B,CACA,OAAqBC,UAArB,CAAiCC,QAAjC,CAA2CC,KAA3C,KAAwD,sBAAxD,CAKA,MAAO,IAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAAIC,CAAJ,QAA8BJ,CAAAA,UAAU,CAACD,KAAK,CAACK,CAAD,CAAN,CAAxC,EAAjB,CACP,MAAO,SAASC,CAAAA,aAAT,CAA0BC,KAA1B,CAAyD,CAC9D,MAAON,CAAAA,UAAU,CAACF,IAAI,CAAWQ,KAAX,CAAL,CAAjB,CACD,CAED,MAAO,IAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAAWC,WAAX,QAA6CP,CAAAA,QAAQ,CAACO,WAAD,CAAc,SAAAF,KAAK,QAAIA,CAAAA,KAAJ,EAAnB,CAArD,EAAjB,CAEP,MAAO,IAAMG,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAAOC,CAAP,CAAkBC,MAAlB,QACxBT,CAAAA,KAAK,CAAC,SAACE,CAAD,CAAU,CACdQ,OAAO,CAACC,GAAR,WAAeH,CAAf,OAAsBN,CAAtB,EACA,MAAOO,CAAAA,MAAM,CAACP,CAAD,CAAb,CACD,CAHI,CADmB,EAAnB","sourcesContent":["import { left, right } from \"fp-ts/lib/Either\"\nimport { TaskEither, fromEither, tryCatch, chain } from \"fp-ts/lib/TaskEither\"\n\nexport type ActionResult<R = void> = TaskEither<Error, R>\nexport type Action<I = void, R = void> = (i: I) => ActionResult<R>\n\nexport const actionOf = <T>(v: T): ActionResult<T> => fromEither(right(v))\nexport function actionErrorOf<R>(error: Error): ActionResult<R> {\n  return fromEither(left<Error, R>(error))\n}\n\nexport const toAction = <R = void>(lazyPromise: () => Promise<R>) => tryCatch(lazyPromise, error => error as Error)\n\nexport const chainLogTE = <I, R>(m: string, action: Action<I, R>) =>\n  chain((v: I) => {\n    console.log(`${m}=>`, v)\n    return action(v)\n  })\n"]},"metadata":{},"sourceType":"module"}