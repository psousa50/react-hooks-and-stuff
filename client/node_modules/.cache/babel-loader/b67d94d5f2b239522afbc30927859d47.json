{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Applicative_1 = require(\"./Applicative\");\n\nvar Either_1 = require(\"./Either\");\n\nfunction getEitherM(M) {\n  var A = Applicative_1.getApplicativeComposition(M, Either_1.either);\n  return __assign(__assign({}, A), {\n    chain: function (ma, f) {\n      return M.chain(ma, function (e) {\n        return Either_1.isLeft(e) ? M.of(Either_1.left(e.left)) : f(e.right);\n      });\n    },\n    alt: function (fx, f) {\n      return M.chain(fx, function (e) {\n        return Either_1.isLeft(e) ? f() : A.of(e.right);\n      });\n    },\n    bimap: function (ma, f, g) {\n      return M.map(ma, function (e) {\n        return Either_1.either.bimap(e, f, g);\n      });\n    },\n    mapLeft: function (ma, f) {\n      return M.map(ma, function (e) {\n        return Either_1.either.mapLeft(e, f);\n      });\n    },\n    fold: function (ma, onLeft, onRight) {\n      return M.chain(ma, Either_1.fold(onLeft, onRight));\n    },\n    getOrElse: function (ma, onLeft) {\n      return M.chain(ma, Either_1.fold(onLeft, M.of));\n    },\n    orElse: function (ma, f) {\n      return M.chain(ma, Either_1.fold(f, function (a) {\n        return A.of(a);\n      }));\n    },\n    swap: function (ma) {\n      return M.map(ma, Either_1.swap);\n    },\n    rightM: function (ma) {\n      return M.map(ma, Either_1.right);\n    },\n    leftM: function (ml) {\n      return M.map(ml, Either_1.left);\n    },\n    left: function (e) {\n      return M.of(Either_1.left(e));\n    }\n  });\n}\n\nexports.getEitherM = getEitherM;","map":null,"metadata":{},"sourceType":"script"}