{"ast":null,"code":"import { pipe } from \"fp-ts/lib/pipeable\";\nimport axios from \"axios\";\nimport { toAction, actionOf, actionErrorOf } from \"../common/actions\";\nimport { chain, map } from \"fp-ts/lib/TaskEither\";\n\nconst mapResponse = response => {\n  return response.status < 300 ? actionOf(response.data) : actionErrorOf(new Error(response.statusText));\n};\n\nexport const toDoApi = {\n  getOne: id => pipe(toAction(() => axios.get(\"https://jsonplaceholder.typicode.com/todos/\".concat(id))), chain(mapResponse)),\n  getAll: () => pipe(toAction(() => axios.get(\"https://jsonplaceholder.typicode.com/todos\")), chain(mapResponse), map(td => td.slice(0, 10)))\n};","map":{"version":3,"sources":["/Users/pedrosousa/WorkEqual/Tests/react-hooks-and-stuff/client/src/api/domain.ts"],"names":["pipe","axios","toAction","actionOf","actionErrorOf","chain","map","mapResponse","response","status","data","Error","statusText","toDoApi","getOne","id","get","getAll","td","slice"],"mappings":"AAAA,SAASA,IAAT,QAAqB,oBAArB;AACA,OAAOC,KAAP,MAAqC,OAArC;AACA,SAAuBC,QAAvB,EAAiCC,QAAjC,EAA2CC,aAA3C,QAAgE,mBAAhE;AACA,SAASC,KAAT,EAAgBC,GAAhB,QAA2B,sBAA3B;;AASA,MAAMC,WAAW,GAAOC,QAAJ,IAAoD;AACtE,SAAOA,QAAQ,CAACC,MAAT,GAAkB,GAAlB,GAAwBN,QAAQ,CAACK,QAAQ,CAACE,IAAV,CAAhC,GAAkDN,aAAa,CAAC,IAAIO,KAAJ,CAAUH,QAAQ,CAACI,UAAnB,CAAD,CAAtE;AACD,CAFD;;AASA,OAAO,MAAMC,OAAgB,GAAG;AAC9BC,EAAAA,MAAM,EAAEC,EAAE,IACRf,IAAI,CACFE,QAAQ,CAAC,MAAMD,KAAK,CAACe,GAAN,sDAA8DD,EAA9D,EAAP,CADN,EAEFV,KAAK,CAACE,WAAD,CAFH,CAFwB;AAO9BU,EAAAA,MAAM,EAAE,MACNjB,IAAI,CACFE,QAAQ,CAAC,MAAMD,KAAK,CAACe,GAAN,8CAAP,CADN,EAEFX,KAAK,CAACE,WAAD,CAFH,EAGFD,GAAG,CAACY,EAAE,IAAIA,EAAE,CAACC,KAAH,CAAS,CAAT,EAAY,EAAZ,CAAP,CAHD;AARwB,CAAzB","sourcesContent":["import { pipe } from \"fp-ts/lib/pipeable\"\nimport axios, { AxiosResponse } from \"axios\"\nimport { ActionResult, toAction, actionOf, actionErrorOf } from \"../common/actions\"\nimport { chain, map } from \"fp-ts/lib/TaskEither\"\n\nexport interface ToDo {\n  userId: number\n  id: number\n  title: string\n  completed: boolean\n}\n\nconst mapResponse = <T>(response: AxiosResponse<T>): ActionResult<T> => {\n  return response.status < 300 ? actionOf(response.data) : actionErrorOf(new Error(response.statusText))\n}\n\nexport interface ToDoApi {\n  getOne: (id: number) => ActionResult<ToDo>\n  getAll: () => ActionResult<ToDo[]>\n}\n\nexport const toDoApi: ToDoApi = {\n  getOne: id =>\n    pipe(\n      toAction(() => axios.get<ToDo>(`https://jsonplaceholder.typicode.com/todos/${id}`)),\n      chain(mapResponse),\n    ),\n\n  getAll: () =>\n    pipe(\n      toAction(() => axios.get<ToDo[]>(`https://jsonplaceholder.typicode.com/todos`)),\n      chain(mapResponse),\n      map(td => td.slice(0, 10)),\n    ),\n}\n"]},"metadata":{},"sourceType":"module"}