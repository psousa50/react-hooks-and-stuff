{"ast":null,"code":"import{pipe}from\"fp-ts/lib/pipeable\";import axios from\"axios\";import{toAction,actionOf,actionErrorOf}from\"../common/actions\";import{chain,map}from\"fp-ts/lib/TaskEither\";var mapResponse=function mapResponse(response){return response.status<300?actionOf(response.data):actionErrorOf(new Error(response.statusText));};export var toDoApi={getOne:function getOne(id){return pipe(toAction(function(){return axios.get(\"https://jsonplaceholder.typicode.com/todos/\".concat(id));}),chain(mapResponse));},getAll:function getAll(){return pipe(toAction(function(){return axios.get(\"https://jsonplaceholder.typicode.com/todos\");}),chain(mapResponse),map(function(td){return td.slice(0,10);}));}};","map":{"version":3,"sources":["/Users/pedrosousa/WorkEqual/Tests/react-hooks-and-stuff/client/src/api/domain.ts"],"names":["pipe","axios","toAction","actionOf","actionErrorOf","chain","map","mapResponse","response","status","data","Error","statusText","toDoApi","getOne","id","get","getAll","td","slice"],"mappings":"AAAA,OAASA,IAAT,KAAqB,oBAArB,CACA,MAAOC,CAAAA,KAAP,KAAqC,OAArC,CACA,OAAuBC,QAAvB,CAAiCC,QAAjC,CAA2CC,aAA3C,KAAgE,mBAAhE,CACA,OAASC,KAAT,CAAgBC,GAAhB,KAA2B,sBAA3B,CASA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAAIC,QAAJ,CAAoD,CACtE,MAAOA,CAAAA,QAAQ,CAACC,MAAT,CAAkB,GAAlB,CAAwBN,QAAQ,CAACK,QAAQ,CAACE,IAAV,CAAhC,CAAkDN,aAAa,CAAC,GAAIO,CAAAA,KAAJ,CAAUH,QAAQ,CAACI,UAAnB,CAAD,CAAtE,CACD,CAFD,CASA,MAAO,IAAMC,CAAAA,OAAgB,CAAG,CAC9BC,MAAM,CAAE,gBAAAC,EAAE,QACRf,CAAAA,IAAI,CACFE,QAAQ,CAAC,iBAAMD,CAAAA,KAAK,CAACe,GAAN,sDAA8DD,EAA9D,EAAN,EAAD,CADN,CAEFV,KAAK,CAACE,WAAD,CAFH,CADI,EADoB,CAO9BU,MAAM,CAAE,wBACNjB,CAAAA,IAAI,CACFE,QAAQ,CAAC,iBAAMD,CAAAA,KAAK,CAACe,GAAN,8CAAN,EAAD,CADN,CAEFX,KAAK,CAACE,WAAD,CAFH,CAGFD,GAAG,CAAC,SAAAY,EAAE,QAAIA,CAAAA,EAAE,CAACC,KAAH,CAAS,CAAT,CAAY,EAAZ,CAAJ,EAAH,CAHD,CADE,EAPsB,CAAzB","sourcesContent":["import { pipe } from \"fp-ts/lib/pipeable\"\nimport axios, { AxiosResponse } from \"axios\"\nimport { ActionResult, toAction, actionOf, actionErrorOf } from \"../common/actions\"\nimport { chain, map } from \"fp-ts/lib/TaskEither\"\n\nexport interface ToDo {\n  userId: number\n  id: number\n  title: string\n  completed: boolean\n}\n\nconst mapResponse = <T>(response: AxiosResponse<T>): ActionResult<T> => {\n  return response.status < 300 ? actionOf(response.data) : actionErrorOf(new Error(response.statusText))\n}\n\nexport interface ToDoApi {\n  getOne: (id: number) => ActionResult<ToDo>\n  getAll: () => ActionResult<ToDo[]>\n}\n\nexport const toDoApi: ToDoApi = {\n  getOne: id =>\n    pipe(\n      toAction(() => axios.get<ToDo>(`https://jsonplaceholder.typicode.com/todos/${id}`)),\n      chain(mapResponse),\n    ),\n\n  getAll: () =>\n    pipe(\n      toAction(() => axios.get<ToDo[]>(`https://jsonplaceholder.typicode.com/todos`)),\n      chain(mapResponse),\n      map(td => td.slice(0, 10)),\n    ),\n}\n"]},"metadata":{},"sourceType":"module"}