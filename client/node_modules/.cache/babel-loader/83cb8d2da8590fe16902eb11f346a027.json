{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  toDos: [],\n  toDo: undefined,\n  loading: false,\n  error: undefined\n};\nconst toDoSlice = createSlice({\n  name: \"ToDos\",\n  initialState,\n  reducers: {\n    onGetToDosStart: state => {\n      state.loading = true;\n    },\n    onGetToDosSuccess: (state, action) => {\n      state.toDos = action.payload;\n      state.loading = false;\n    },\n    onGetToDosError: (state, action) => {\n      state.error = action.payload;\n      state.loading = false;\n    },\n    onGetToDoStart: state => {\n      state.loading = true;\n    },\n    onGetToDoSuccess: (state, action) => {\n      state.toDo = action.payload;\n      state.loading = false;\n    },\n    onGetToDoError: (state, action) => {\n      state.error = action.payload;\n      state.loading = false;\n    }\n  }\n});\nconst _toDoSlice$actions = toDoSlice.actions,\n      onGetToDosStart = _toDoSlice$actions.onGetToDosStart,\n      onGetToDosSuccess = _toDoSlice$actions.onGetToDosSuccess,\n      onGetToDosError = _toDoSlice$actions.onGetToDosError,\n      onGetToDoStart = _toDoSlice$actions.onGetToDoStart,\n      onGetToDoSuccess = _toDoSlice$actions.onGetToDoSuccess,\n      onGetToDoError = _toDoSlice$actions.onGetToDoError;\nexport { onGetToDosStart, onGetToDosSuccess, onGetToDosError, onGetToDoStart, onGetToDoSuccess, onGetToDoError };\nexport const reducer = toDoSlice.reducer;","map":{"version":3,"sources":["/Users/pedrosousa/WorkEqual/Tests/react-hooks-and-stuff/client/src/state/toDosSlice.ts"],"names":["createSlice","initialState","toDos","toDo","undefined","loading","error","toDoSlice","name","reducers","onGetToDosStart","state","onGetToDosSuccess","action","payload","onGetToDosError","onGetToDoStart","onGetToDoSuccess","onGetToDoError","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA2C,kBAA3C;AAUA,MAAMC,YAAuB,GAAG;AAC9BC,EAAAA,KAAK,EAAE,EADuB;AAE9BC,EAAAA,IAAI,EAAEC,SAFwB;AAG9BC,EAAAA,OAAO,EAAE,KAHqB;AAI9BC,EAAAA,KAAK,EAAEF;AAJuB,CAAhC;AAOA,MAAMG,SAAS,GAAGP,WAAW,CAAC;AAC5BQ,EAAAA,IAAI,EAAE,OADsB;AAE5BP,EAAAA,YAF4B;AAG5BQ,EAAAA,QAAQ,EAAE;AACRC,IAAAA,eAAe,EAAEC,KAAK,IAAI;AACxBA,MAAAA,KAAK,CAACN,OAAN,GAAgB,IAAhB;AACD,KAHO;AAIRO,IAAAA,iBAAiB,EAAE,CAACD,KAAD,EAAQE,MAAR,KAA0C;AAC3DF,MAAAA,KAAK,CAACT,KAAN,GAAcW,MAAM,CAACC,OAArB;AACAH,MAAAA,KAAK,CAACN,OAAN,GAAgB,KAAhB;AACD,KAPO;AAQRU,IAAAA,eAAe,EAAE,CAACJ,KAAD,EAAQE,MAAR,KAA0C;AACzDF,MAAAA,KAAK,CAACL,KAAN,GAAcO,MAAM,CAACC,OAArB;AACAH,MAAAA,KAAK,CAACN,OAAN,GAAgB,KAAhB;AACD,KAXO;AAYRW,IAAAA,cAAc,EAAEL,KAAK,IAAI;AACvBA,MAAAA,KAAK,CAACN,OAAN,GAAgB,IAAhB;AACD,KAdO;AAeRY,IAAAA,gBAAgB,EAAE,CAACN,KAAD,EAAQE,MAAR,KAAwC;AACxDF,MAAAA,KAAK,CAACR,IAAN,GAAaU,MAAM,CAACC,OAApB;AACAH,MAAAA,KAAK,CAACN,OAAN,GAAgB,KAAhB;AACD,KAlBO;AAmBRa,IAAAA,cAAc,EAAE,CAACP,KAAD,EAAQE,MAAR,KAA0C;AACxDF,MAAAA,KAAK,CAACL,KAAN,GAAcO,MAAM,CAACC,OAArB;AACAH,MAAAA,KAAK,CAACN,OAAN,GAAgB,KAAhB;AACD;AAtBO;AAHkB,CAAD,CAA7B;2BAoCIE,SAAS,CAACY,O;MANZT,e,sBAAAA,e;MACAE,iB,sBAAAA,iB;MACAG,e,sBAAAA,e;MACAC,c,sBAAAA,c;MACAC,gB,sBAAAA,gB;MACAC,c,sBAAAA,c;;AAGF,OAAO,MAAME,OAAO,GAAGb,SAAS,CAACa,OAA1B","sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\"\nimport { ToDo } from \"../api/domain\"\n\ninterface ToDoState {\n  toDos: ToDo[]\n  toDo: ToDo | undefined\n  loading: boolean\n  error: string | undefined\n}\n\nconst initialState: ToDoState = {\n  toDos: [],\n  toDo: undefined,\n  loading: false,\n  error: undefined,\n}\n\nconst toDoSlice = createSlice({\n  name: \"ToDos\",\n  initialState,\n  reducers: {\n    onGetToDosStart: state => {\n      state.loading = true\n    },\n    onGetToDosSuccess: (state, action: PayloadAction<ToDo[]>) => {\n      state.toDos = action.payload\n      state.loading = false\n    },\n    onGetToDosError: (state, action: PayloadAction<string>) => {\n      state.error = action.payload\n      state.loading = false\n    },\n    onGetToDoStart: state => {\n      state.loading = true\n    },\n    onGetToDoSuccess: (state, action: PayloadAction<ToDo>) => {\n      state.toDo = action.payload\n      state.loading = false\n    },\n    onGetToDoError: (state, action: PayloadAction<string>) => {\n      state.error = action.payload\n      state.loading = false\n    },\n  },\n})\n\nexport const {\n  onGetToDosStart,\n  onGetToDosSuccess,\n  onGetToDosError,\n  onGetToDoStart,\n  onGetToDoSuccess,\n  onGetToDoError,\n} = toDoSlice.actions\n\nexport const reducer = toDoSlice.reducer\n"]},"metadata":{},"sourceType":"module"}