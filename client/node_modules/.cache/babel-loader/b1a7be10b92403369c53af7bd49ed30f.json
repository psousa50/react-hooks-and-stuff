{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar E = require(\"./Either\");\n\nvar EitherT_1 = require(\"./EitherT\");\n\nvar pipeable_1 = require(\"./pipeable\");\n\nvar Task_1 = require(\"./Task\");\n\nvar ValidationT_1 = require(\"./ValidationT\");\n\nvar Filterable_1 = require(\"./Filterable\");\n\nvar T = EitherT_1.getEitherM(Task_1.task);\n/**\n * @since 2.0.0\n */\n\nexports.URI = 'TaskEither';\n/**\n * @since 2.0.0\n */\n\nexports.left = T.left;\n/**\n * @since 2.0.0\n */\n\nexports.right = T.of;\n/**\n * @since 2.0.0\n */\n\nfunction rightIO(ma) {\n  return exports.rightTask(Task_1.task.fromIO(ma));\n}\n\nexports.rightIO = rightIO;\n/**\n * @since 2.0.0\n */\n\nfunction leftIO(me) {\n  return exports.leftTask(Task_1.task.fromIO(me));\n}\n\nexports.leftIO = leftIO;\n/**\n * @since 2.0.0\n */\n\nexports.rightTask = T.rightM;\n/**\n * @since 2.0.0\n */\n\nexports.leftTask = T.leftM;\n/**\n * @since 2.0.0\n */\n\nexports.fromIOEither = Task_1.task.fromIO;\n/**\n * @since 2.0.0\n */\n\nfunction fold(onLeft, onRight) {\n  return function (ma) {\n    return T.fold(ma, onLeft, onRight);\n  };\n}\n\nexports.fold = fold;\n/**\n * @since 2.0.0\n */\n\nfunction getOrElse(onLeft) {\n  return function (ma) {\n    return T.getOrElse(ma, onLeft);\n  };\n}\n\nexports.getOrElse = getOrElse;\n/**\n * @since 2.0.0\n */\n\nfunction orElse(onLeft) {\n  return function (ma) {\n    return T.orElse(ma, onLeft);\n  };\n}\n\nexports.orElse = orElse;\n/**\n * @since 2.0.0\n */\n\nexports.swap = T.swap;\n/**\n * @since 2.0.0\n */\n\nfunction getSemigroup(S) {\n  return Task_1.getSemigroup(E.getSemigroup(S));\n}\n\nexports.getSemigroup = getSemigroup;\n/**\n * @since 2.0.0\n */\n\nfunction getApplySemigroup(S) {\n  return Task_1.getSemigroup(E.getApplySemigroup(S));\n}\n\nexports.getApplySemigroup = getApplySemigroup;\n/**\n * @since 2.0.0\n */\n\nfunction getApplyMonoid(M) {\n  return {\n    concat: getApplySemigroup(M).concat,\n    empty: exports.right(M.empty)\n  };\n}\n\nexports.getApplyMonoid = getApplyMonoid;\n/**\n * Transforms a `Promise` that may reject to a `Promise` that never rejects and returns an `Either` instead.\n *\n * Note: `f` should never `throw` errors, they are not caught.\n *\n * @example\n * import { left, right } from 'fp-ts/lib/Either'\n * import { tryCatch } from 'fp-ts/lib/TaskEither'\n *\n * tryCatch(() => Promise.resolve(1), String)().then(result => {\n *   assert.deepStrictEqual(result, right(1))\n * })\n * tryCatch(() => Promise.reject('error'), String)().then(result => {\n *   assert.deepStrictEqual(result, left('error'))\n * })\n *\n * @since 2.0.0\n */\n\nfunction tryCatch(f, onRejected) {\n  return function () {\n    return f().then(E.right, function (reason) {\n      return E.left(onRejected(reason));\n    });\n  };\n}\n\nexports.tryCatch = tryCatch;\n/**\n * Make sure that a resource is cleaned up in the event of an exception (*). The release action is called regardless of\n * whether the body action throws (*) or returns.\n *\n * (*) i.e. returns a `Left`\n *\n * @since 2.0.0\n */\n\nfunction bracket(acquire, use, release) {\n  return T.chain(acquire, function (a) {\n    return T.chain(Task_1.task.map(use(a), E.right), function (e) {\n      return T.chain(release(a, e), function () {\n        return E.isLeft(e) ? T.left(e.left) : T.of(e.right);\n      });\n    });\n  });\n}\n\nexports.bracket = bracket;\n\nfunction taskify(f) {\n  return function () {\n    var args = Array.prototype.slice.call(arguments);\n    return function () {\n      return new Promise(function (resolve) {\n        var cbResolver = function cbResolver(e, r) {\n          return e != null ? resolve(E.left(e)) : resolve(E.right(r));\n        };\n\n        f.apply(null, args.concat(cbResolver));\n      });\n    };\n  };\n}\n\nexports.taskify = taskify;\n/**\n * @since 2.0.0\n */\n\nfunction getTaskValidation(S) {\n  var T = ValidationT_1.getValidationM(S, Task_1.task);\n  return __assign({\n    URI: exports.URI,\n    _E: undefined\n  }, T);\n}\n\nexports.getTaskValidation = getTaskValidation;\nvar phantom = undefined;\n/**\n * @since 2.1.0\n */\n\nfunction getFilterable(M) {\n  var F = E.getWitherable(M);\n  return __assign({\n    URI: exports.URI,\n    _E: phantom\n  }, Filterable_1.getFilterableComposition(Task_1.task, F));\n}\n\nexports.getFilterable = getFilterable;\n/**\n * @since 2.0.0\n */\n\nexports.taskEither = {\n  URI: exports.URI,\n  bimap: T.bimap,\n  mapLeft: T.mapLeft,\n  map: T.map,\n  of: T.of,\n  ap: T.ap,\n  chain: T.chain,\n  alt: T.alt,\n  fromIO: rightIO,\n  fromTask: exports.rightTask,\n  throwError: exports.left\n};\n/**\n * Like `TaskEither` but `ap` is sequential\n *\n * @since 2.0.0\n */\n\nexports.taskEitherSeq = __assign(__assign({}, exports.taskEither), {\n  ap: function ap(mab, ma) {\n    return T.chain(mab, function (f) {\n      return T.map(ma, f);\n    });\n  }\n});\n\nvar _a = pipeable_1.pipeable(exports.taskEither),\n    alt = _a.alt,\n    ap = _a.ap,\n    apFirst = _a.apFirst,\n    apSecond = _a.apSecond,\n    bimap = _a.bimap,\n    chain = _a.chain,\n    chainFirst = _a.chainFirst,\n    flatten = _a.flatten,\n    map = _a.map,\n    mapLeft = _a.mapLeft,\n    fromEither = _a.fromEither,\n    fromOption = _a.fromOption,\n    fromPredicate = _a.fromPredicate,\n    filterOrElse = _a.filterOrElse;\n\nexports.alt = alt;\nexports.ap = ap;\nexports.apFirst = apFirst;\nexports.apSecond = apSecond;\nexports.bimap = bimap;\nexports.chain = chain;\nexports.chainFirst = chainFirst;\nexports.flatten = flatten;\nexports.map = map;\nexports.mapLeft = mapLeft;\nexports.fromEither = fromEither;\nexports.fromOption = fromOption;\nexports.fromPredicate = fromPredicate;\nexports.filterOrElse = filterOrElse;","map":null,"metadata":{},"sourceType":"script"}