{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar pipeable_1 = require(\"./pipeable\");\n/**\n * @since 2.0.0\n */\n\n\nexports.URI = 'Option';\n/**\n * @since 2.0.0\n */\n\nexports.none = {\n  _tag: 'None'\n};\n/**\n * @since 2.0.0\n */\n\nfunction some(a) {\n  return {\n    _tag: 'Some',\n    value: a\n  };\n}\n\nexports.some = some;\n/**\n * Returns `true` if the option is an instance of `Some`, `false` otherwise\n *\n * @example\n * import { some, none, isSome } from 'fp-ts/lib/Option'\n *\n * assert.strictEqual(isSome(some(1)), true)\n * assert.strictEqual(isSome(none), false)\n *\n * @since 2.0.0\n */\n\nfunction isSome(fa) {\n  return fa._tag === 'Some';\n}\n\nexports.isSome = isSome;\n/**\n * Returns `true` if the option is `None`, `false` otherwise\n *\n * @example\n * import { some, none, isNone } from 'fp-ts/lib/Option'\n *\n * assert.strictEqual(isNone(some(1)), false)\n * assert.strictEqual(isNone(none), true)\n *\n * @since 2.0.0\n */\n\nfunction isNone(fa) {\n  return fa._tag === 'None';\n}\n\nexports.isNone = isNone;\n/**\n * Takes a default value, a function, and an `Option` value, if the `Option` value is `None` the default value is\n * returned, otherwise the function is applied to the value inside the `Some` and the result is returned.\n *\n * @example\n * import { some, none, fold } from 'fp-ts/lib/Option'\n * import { pipe } from 'fp-ts/lib/pipeable'\n *\n * assert.strictEqual(\n *   pipe(\n *     some(1),\n *     fold(() => 'a none', a => `a some containing ${a}`)\n *   ),\n *   'a some containing 1'\n * )\n *\n * assert.strictEqual(\n *   pipe(\n *     none,\n *     fold(() => 'a none', a => `a some containing ${a}`)\n *   ),\n *   'a none'\n * )\n *\n * @since 2.0.0\n */\n\nfunction fold(onNone, onSome) {\n  return function (ma) {\n    return isNone(ma) ? onNone() : onSome(ma.value);\n  };\n}\n\nexports.fold = fold;\n/**\n * Constructs a new `Option` from a nullable type. If the value is `null` or `undefined`, returns `None`, otherwise\n * returns the value wrapped in a `Some`\n *\n * @example\n * import { none, some, fromNullable } from 'fp-ts/lib/Option'\n *\n * assert.deepStrictEqual(fromNullable(undefined), none)\n * assert.deepStrictEqual(fromNullable(null), none)\n * assert.deepStrictEqual(fromNullable(1), some(1))\n *\n * @since 2.0.0\n */\n\nfunction fromNullable(a) {\n  return a == null ? exports.none : some(a);\n}\n\nexports.fromNullable = fromNullable;\n/**\n * Extracts the value out of the structure, if it exists. Otherwise returns `null`.\n *\n * @example\n * import { some, none, toNullable } from 'fp-ts/lib/Option'\n * import { pipe } from 'fp-ts/lib/pipeable'\n *\n * assert.strictEqual(\n *   pipe(\n *     some(1),\n *     toNullable\n *   ),\n *   1\n * )\n * assert.strictEqual(\n *   pipe(\n *     none,\n *     toNullable\n *   ),\n *   null\n * )\n *\n * @since 2.0.0\n */\n\nfunction toNullable(ma) {\n  return isNone(ma) ? null : ma.value;\n}\n\nexports.toNullable = toNullable;\n/**\n * Extracts the value out of the structure, if it exists. Otherwise returns `undefined`.\n *\n * @example\n * import { some, none, toUndefined } from 'fp-ts/lib/Option'\n * import { pipe } from 'fp-ts/lib/pipeable'\n *\n * assert.strictEqual(\n *   pipe(\n *     some(1),\n *     toUndefined\n *   ),\n *   1\n * )\n * assert.strictEqual(\n *   pipe(\n *     none,\n *     toUndefined\n *   ),\n *   undefined\n * )\n *\n * @since 2.0.0\n */\n\nfunction toUndefined(ma) {\n  return isNone(ma) ? undefined : ma.value;\n}\n\nexports.toUndefined = toUndefined;\n/**\n * Extracts the value out of the structure, if it exists. Otherwise returns the given default value\n *\n * @example\n * import { some, none, getOrElse } from 'fp-ts/lib/Option'\n * import { pipe } from 'fp-ts/lib/pipeable'\n *\n * assert.strictEqual(\n *   pipe(\n *     some(1),\n *     getOrElse(() => 0)\n *   ),\n *   1\n * )\n * assert.strictEqual(\n *   pipe(\n *     none,\n *     getOrElse(() => 0)\n *   ),\n *   0\n * )\n *\n * @since 2.0.0\n */\n\nfunction getOrElse(onNone) {\n  return function (ma) {\n    return isNone(ma) ? onNone() : ma.value;\n  };\n}\n\nexports.getOrElse = getOrElse;\n/**\n * Returns `true` if `ma` contains `a`\n *\n * @example\n * import { some, none, elem } from 'fp-ts/lib/Option'\n * import { eqNumber } from 'fp-ts/lib/Eq'\n *\n * assert.strictEqual(elem(eqNumber)(1, some(1)), true)\n * assert.strictEqual(elem(eqNumber)(2, some(1)), false)\n * assert.strictEqual(elem(eqNumber)(1, none), false)\n *\n * @since 2.0.0\n */\n\nfunction elem(E) {\n  return function (a, ma) {\n    return isNone(ma) ? false : E.equals(a, ma.value);\n  };\n}\n\nexports.elem = elem;\n/**\n * Returns `true` if the predicate is satisfied by the wrapped value\n *\n * @example\n * import { some, none, exists } from 'fp-ts/lib/Option'\n * import { pipe } from 'fp-ts/lib/pipeable'\n *\n * assert.strictEqual(\n *   pipe(\n *     some(1),\n *     exists(n => n > 0)\n *   ),\n *   true\n * )\n * assert.strictEqual(\n *   pipe(\n *     some(1),\n *     exists(n => n > 1)\n *   ),\n *   false\n * )\n * assert.strictEqual(\n *   pipe(\n *     none,\n *     exists(n => n > 0)\n *   ),\n *   false\n * )\n *\n * @since 2.0.0\n */\n\nfunction exists(predicate) {\n  return function (ma) {\n    return isNone(ma) ? false : predicate(ma.value);\n  };\n}\n\nexports.exists = exists;\n\nfunction fromPredicate(predicate) {\n  return function (a) {\n    return predicate(a) ? some(a) : exports.none;\n  };\n}\n\nexports.fromPredicate = fromPredicate;\n/**\n * Transforms an exception into an `Option`. If `f` throws, returns `None`, otherwise returns the output wrapped in\n * `Some`\n *\n * @example\n * import { none, some, tryCatch } from 'fp-ts/lib/Option'\n *\n * assert.deepStrictEqual(\n *   tryCatch(() => {\n *     throw new Error()\n *   }),\n *   none\n * )\n * assert.deepStrictEqual(tryCatch(() => 1), some(1))\n *\n * @since 2.0.0\n */\n\nfunction tryCatch(f) {\n  try {\n    return some(f());\n  } catch (e) {\n    return exports.none;\n  }\n}\n\nexports.tryCatch = tryCatch;\n/**\n * Returns an `E` value if possible\n *\n * @since 2.0.0\n */\n\nfunction getLeft(ma) {\n  return ma._tag === 'Right' ? exports.none : some(ma.left);\n}\n\nexports.getLeft = getLeft;\n/**\n * Returns an `A` value if possible\n *\n * @since 2.0.0\n */\n\nfunction getRight(ma) {\n  return ma._tag === 'Left' ? exports.none : some(ma.right);\n}\n\nexports.getRight = getRight;\n/**\n * Returns a `Refinement` (i.e. a custom type guard) from a `Option` returning function.\n * This function ensures that a custom type guard definition is type-safe.\n *\n * ```ts\n * import { some, none, getRefinement } from 'fp-ts/lib/Option'\n *\n * type A = { type: 'A' }\n * type B = { type: 'B' }\n * type C = A | B\n *\n * const isA = (c: C): c is A => c.type === 'B' // <= typo but typescript doesn't complain\n * const isA = getRefinement<C, A>(c => (c.type === 'B' ? some(c) : none)) // static error: Type '\"B\"' is not assignable to type '\"A\"'\n * ```\n *\n * @since 2.0.0\n */\n\nfunction getRefinement(getOption) {\n  return function (a) {\n    return isSome(getOption(a));\n  };\n}\n\nexports.getRefinement = getRefinement;\n/**\n * This is `chain` + `fromNullable`, useful when working with optional values\n *\n * @example\n * import { some, none, fromNullable, mapNullable } from 'fp-ts/lib/Option'\n * import { pipe } from 'fp-ts/lib/pipeable'\n *\n * interface Employee {\n *   company?: {\n *     address?: {\n *       street?: {\n *         name?: string\n *       }\n *     }\n *   }\n * }\n *\n * const employee1: Employee = { company: { address: { street: { name: 'high street' } } } }\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     fromNullable(employee1.company),\n *     mapNullable(company => company.address),\n *     mapNullable(address => address.street),\n *     mapNullable(street => street.name)\n *   ),\n *   some('high street')\n * )\n *\n * const employee2: Employee = { company: { address: { street: {} } } }\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     fromNullable(employee2.company),\n *     mapNullable(company => company.address),\n *     mapNullable(address => address.street),\n *     mapNullable(street => street.name)\n *   ),\n *   none\n * )\n *\n * @since 2.0.0\n */\n\nfunction mapNullable(f) {\n  return function (ma) {\n    return isNone(ma) ? exports.none : fromNullable(f(ma.value));\n  };\n}\n\nexports.mapNullable = mapNullable;\n/**\n * @since 2.0.0\n */\n\nfunction getShow(S) {\n  return {\n    show: function show(ma) {\n      return isNone(ma) ? 'none' : \"some(\" + S.show(ma.value) + \")\";\n    }\n  };\n}\n\nexports.getShow = getShow;\n/**\n * @example\n * import { none, some, getEq } from 'fp-ts/lib/Option'\n * import { eqNumber } from 'fp-ts/lib/Eq'\n *\n * const E = getEq(eqNumber)\n * assert.strictEqual(E.equals(none, none), true)\n * assert.strictEqual(E.equals(none, some(1)), false)\n * assert.strictEqual(E.equals(some(1), none), false)\n * assert.strictEqual(E.equals(some(1), some(2)), false)\n * assert.strictEqual(E.equals(some(1), some(1)), true)\n *\n * @since 2.0.0\n */\n\nfunction getEq(E) {\n  return {\n    equals: function equals(x, y) {\n      return x === y || (isNone(x) ? isNone(y) : isNone(y) ? false : E.equals(x.value, y.value));\n    }\n  };\n}\n\nexports.getEq = getEq;\n/**\n * The `Ord` instance allows `Option` values to be compared with\n * `compare`, whenever there is an `Ord` instance for\n * the type the `Option` contains.\n *\n * `None` is considered to be less than any `Some` value.\n *\n *\n * @example\n * import { none, some, getOrd } from 'fp-ts/lib/Option'\n * import { ordNumber } from 'fp-ts/lib/Ord'\n *\n * const O = getOrd(ordNumber)\n * assert.strictEqual(O.compare(none, none), 0)\n * assert.strictEqual(O.compare(none, some(1)), -1)\n * assert.strictEqual(O.compare(some(1), none), 1)\n * assert.strictEqual(O.compare(some(1), some(2)), -1)\n * assert.strictEqual(O.compare(some(1), some(1)), 0)\n *\n * @since 2.0.0\n */\n\nfunction getOrd(O) {\n  return {\n    equals: getEq(O).equals,\n    compare: function compare(x, y) {\n      return x === y ? 0 : isSome(x) ? isSome(y) ? O.compare(x.value, y.value) : 1 : -1;\n    }\n  };\n}\n\nexports.getOrd = getOrd;\n/**\n * `Apply` semigroup\n *\n * | x       | y       | concat(x, y)       |\n * | ------- | ------- | ------------------ |\n * | none    | none    | none               |\n * | some(a) | none    | none               |\n * | none    | some(a) | none               |\n * | some(a) | some(b) | some(concat(a, b)) |\n *\n * @example\n * import { getApplySemigroup, some, none } from 'fp-ts/lib/Option'\n * import { semigroupSum } from 'fp-ts/lib/Semigroup'\n *\n * const S = getApplySemigroup(semigroupSum)\n * assert.deepStrictEqual(S.concat(none, none), none)\n * assert.deepStrictEqual(S.concat(some(1), none), none)\n * assert.deepStrictEqual(S.concat(none, some(1)), none)\n * assert.deepStrictEqual(S.concat(some(1), some(2)), some(3))\n *\n * @since 2.0.0\n */\n\nfunction getApplySemigroup(S) {\n  return {\n    concat: function concat(x, y) {\n      return isSome(x) && isSome(y) ? some(S.concat(x.value, y.value)) : exports.none;\n    }\n  };\n}\n\nexports.getApplySemigroup = getApplySemigroup;\n/**\n * @since 2.0.0\n */\n\nfunction getApplyMonoid(M) {\n  return __assign(__assign({}, getApplySemigroup(M)), {\n    empty: some(M.empty)\n  });\n}\n\nexports.getApplyMonoid = getApplyMonoid;\n/**\n * Monoid returning the left-most non-`None` value\n *\n * | x       | y       | concat(x, y) |\n * | ------- | ------- | ------------ |\n * | none    | none    | none         |\n * | some(a) | none    | some(a)      |\n * | none    | some(a) | some(a)      |\n * | some(a) | some(b) | some(a)      |\n *\n * @example\n * import { getFirstMonoid, some, none } from 'fp-ts/lib/Option'\n *\n * const M = getFirstMonoid<number>()\n * assert.deepStrictEqual(M.concat(none, none), none)\n * assert.deepStrictEqual(M.concat(some(1), none), some(1))\n * assert.deepStrictEqual(M.concat(none, some(1)), some(1))\n * assert.deepStrictEqual(M.concat(some(1), some(2)), some(1))\n *\n * @since 2.0.0\n */\n\nfunction getFirstMonoid() {\n  return {\n    concat: function concat(x, y) {\n      return isNone(x) ? y : x;\n    },\n    empty: exports.none\n  };\n}\n\nexports.getFirstMonoid = getFirstMonoid;\n/**\n * Monoid returning the right-most non-`None` value\n *\n * | x       | y       | concat(x, y) |\n * | ------- | ------- | ------------ |\n * | none    | none    | none         |\n * | some(a) | none    | some(a)      |\n * | none    | some(a) | some(a)      |\n * | some(a) | some(b) | some(b)      |\n *\n * @example\n * import { getLastMonoid, some, none } from 'fp-ts/lib/Option'\n *\n * const M = getLastMonoid<number>()\n * assert.deepStrictEqual(M.concat(none, none), none)\n * assert.deepStrictEqual(M.concat(some(1), none), some(1))\n * assert.deepStrictEqual(M.concat(none, some(1)), some(1))\n * assert.deepStrictEqual(M.concat(some(1), some(2)), some(2))\n *\n * @since 2.0.0\n */\n\nfunction getLastMonoid() {\n  return {\n    concat: function concat(x, y) {\n      return isNone(y) ? x : y;\n    },\n    empty: exports.none\n  };\n}\n\nexports.getLastMonoid = getLastMonoid;\n/**\n * Monoid returning the left-most non-`None` value. If both operands are `Some`s then the inner values are\n * appended using the provided `Semigroup`\n *\n * | x       | y       | concat(x, y)       |\n * | ------- | ------- | ------------------ |\n * | none    | none    | none               |\n * | some(a) | none    | some(a)            |\n * | none    | some(a) | some(a)            |\n * | some(a) | some(b) | some(concat(a, b)) |\n *\n * @example\n * import { getMonoid, some, none } from 'fp-ts/lib/Option'\n * import { semigroupSum } from 'fp-ts/lib/Semigroup'\n *\n * const M = getMonoid(semigroupSum)\n * assert.deepStrictEqual(M.concat(none, none), none)\n * assert.deepStrictEqual(M.concat(some(1), none), some(1))\n * assert.deepStrictEqual(M.concat(none, some(1)), some(1))\n * assert.deepStrictEqual(M.concat(some(1), some(2)), some(3))\n *\n * @since 2.0.0\n */\n\nfunction getMonoid(S) {\n  return {\n    concat: function concat(x, y) {\n      return isNone(x) ? y : isNone(y) ? x : some(S.concat(x.value, y.value));\n    },\n    empty: exports.none\n  };\n}\n\nexports.getMonoid = getMonoid;\nvar defaultSeparate = {\n  left: exports.none,\n  right: exports.none\n};\n\nvar identity = function identity(a) {\n  return a;\n};\n/**\n * @since 2.0.0\n */\n\n\nexports.option = {\n  URI: exports.URI,\n  map: function map(ma, f) {\n    return isNone(ma) ? exports.none : some(f(ma.value));\n  },\n  of: some,\n  ap: function ap(mab, ma) {\n    return isNone(mab) ? exports.none : isNone(ma) ? exports.none : some(mab.value(ma.value));\n  },\n  chain: function chain(ma, f) {\n    return isNone(ma) ? exports.none : f(ma.value);\n  },\n  reduce: function reduce(fa, b, f) {\n    return isNone(fa) ? b : f(b, fa.value);\n  },\n  foldMap: function foldMap(M) {\n    return function (fa, f) {\n      return isNone(fa) ? M.empty : f(fa.value);\n    };\n  },\n  reduceRight: function reduceRight(fa, b, f) {\n    return isNone(fa) ? b : f(fa.value, b);\n  },\n  traverse: function traverse(F) {\n    return function (ta, f) {\n      return isNone(ta) ? F.of(exports.none) : F.map(f(ta.value), some);\n    };\n  },\n  sequence: function sequence(F) {\n    return function (ta) {\n      return isNone(ta) ? F.of(exports.none) : F.map(ta.value, some);\n    };\n  },\n  zero: function zero() {\n    return exports.none;\n  },\n  alt: function alt(ma, f) {\n    return isNone(ma) ? f() : ma;\n  },\n  extend: function extend(wa, f) {\n    return isNone(wa) ? exports.none : some(f(wa));\n  },\n  compact: function compact(ma) {\n    return exports.option.chain(ma, identity);\n  },\n  separate: function separate(ma) {\n    var o = exports.option.map(ma, function (e) {\n      return {\n        left: getLeft(e),\n        right: getRight(e)\n      };\n    });\n    return isNone(o) ? defaultSeparate : o.value;\n  },\n  filter: function filter(fa, predicate) {\n    return isNone(fa) ? exports.none : predicate(fa.value) ? fa : exports.none;\n  },\n  filterMap: function filterMap(ma, f) {\n    return isNone(ma) ? exports.none : f(ma.value);\n  },\n  partition: function partition(fa, predicate) {\n    return {\n      left: exports.option.filter(fa, function (a) {\n        return !predicate(a);\n      }),\n      right: exports.option.filter(fa, predicate)\n    };\n  },\n  partitionMap: function partitionMap(fa, f) {\n    return exports.option.separate(exports.option.map(fa, f));\n  },\n  wither: function wither(F) {\n    return function (fa, f) {\n      return isNone(fa) ? F.of(exports.none) : f(fa.value);\n    };\n  },\n  wilt: function wilt(F) {\n    return function (fa, f) {\n      var o = exports.option.map(fa, function (a) {\n        return F.map(f(a), function (e) {\n          return {\n            left: getLeft(e),\n            right: getRight(e)\n          };\n        });\n      });\n      return isNone(o) ? F.of({\n        left: exports.none,\n        right: exports.none\n      }) : o.value;\n    };\n  },\n  throwError: function throwError() {\n    return exports.none;\n  }\n};\n\nvar _a = pipeable_1.pipeable(exports.option),\n    alt = _a.alt,\n    ap = _a.ap,\n    apFirst = _a.apFirst,\n    apSecond = _a.apSecond,\n    chain = _a.chain,\n    chainFirst = _a.chainFirst,\n    duplicate = _a.duplicate,\n    extend = _a.extend,\n    filter = _a.filter,\n    filterMap = _a.filterMap,\n    flatten = _a.flatten,\n    foldMap = _a.foldMap,\n    map = _a.map,\n    partition = _a.partition,\n    partitionMap = _a.partitionMap,\n    reduce = _a.reduce,\n    reduceRight = _a.reduceRight,\n    compact = _a.compact,\n    separate = _a.separate,\n    fromEither = _a.fromEither;\n\nexports.alt = alt;\nexports.ap = ap;\nexports.apFirst = apFirst;\nexports.apSecond = apSecond;\nexports.chain = chain;\nexports.chainFirst = chainFirst;\nexports.duplicate = duplicate;\nexports.extend = extend;\nexports.filter = filter;\nexports.filterMap = filterMap;\nexports.flatten = flatten;\nexports.foldMap = foldMap;\nexports.map = map;\nexports.partition = partition;\nexports.partitionMap = partitionMap;\nexports.reduce = reduce;\nexports.reduceRight = reduceRight;\nexports.compact = compact;\nexports.separate = separate;\nexports.fromEither = fromEither;","map":null,"metadata":{},"sourceType":"script"}