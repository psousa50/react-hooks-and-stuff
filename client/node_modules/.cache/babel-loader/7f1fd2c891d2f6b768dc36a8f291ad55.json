{"ast":null,"code":"import { useContext, useEffect } from \"react\";\nimport { EnvironmentContext } from \"../Environment\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { onGetToDosStart, onGetToDosError, onGetToDosSuccess, onGetToDoStart, onGetToDoError, onGetToDoSuccess } from \"../state/toDosSlice\";\nimport { pipe } from \"fp-ts/lib/pipeable\";\nimport { task } from \"fp-ts/lib/Task\";\nimport { fold } from \"fp-ts/lib/TaskEither\";\nexport const useFetchToDos = () => {\n  const _useContext = useContext(EnvironmentContext),\n        toDoApi = _useContext.toDoApi;\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    const fetch = async () => {\n      dispatch(onGetToDosStart());\n      return await pipe(toDoApi.getAll(), fold(error => {\n        dispatch(onGetToDosError(error.message));\n        return task.of(undefined);\n      }, toDos => {\n        dispatch(onGetToDosSuccess(toDos));\n        return task.of(undefined);\n      }))();\n    };\n\n    fetch();\n  }, [dispatch, toDoApi]);\n\n  const _useSelector = useSelector(state => state.toDos),\n        toDos = _useSelector.toDos,\n        loading = _useSelector.loading,\n        error = _useSelector.error;\n\n  return {\n    toDos,\n    loading,\n    error\n  };\n};\nexport const useFetchToDo = id => {\n  const _useContext2 = useContext(EnvironmentContext),\n        toDoApi = _useContext2.toDoApi;\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    const fetch = async () => {\n      dispatch(onGetToDoStart());\n      return await pipe(toDoApi.getOne(id), fold(error => {\n        dispatch(onGetToDoError(error.message));\n        return task.of(undefined);\n      }, toDo => {\n        dispatch(onGetToDoSuccess(toDo));\n        return task.of(undefined);\n      }))();\n    };\n\n    fetch();\n  }, [dispatch, toDoApi, id]);\n\n  const _useSelector2 = useSelector(state => state.toDos),\n        toDo = _useSelector2.toDo,\n        loading = _useSelector2.loading,\n        error = _useSelector2.error;\n\n  return {\n    toDo,\n    loading,\n    error\n  };\n};","map":{"version":3,"sources":["/Users/pedrosousa/WorkEqual/Tests/react-hooks-and-stuff/client/src/api/hooks.ts"],"names":["useContext","useEffect","EnvironmentContext","useDispatch","useSelector","onGetToDosStart","onGetToDosError","onGetToDosSuccess","onGetToDoStart","onGetToDoError","onGetToDoSuccess","pipe","task","fold","useFetchToDos","toDoApi","dispatch","fetch","getAll","error","message","of","undefined","toDos","state","loading","useFetchToDo","id","getOne","toDo"],"mappings":"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","sourcesContent":["import { useContext, useEffect } from \"react\"\nimport { EnvironmentContext } from \"../Environment\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport {\n  onGetToDosStart,\n  onGetToDosError,\n  onGetToDosSuccess,\n  onGetToDoStart,\n  onGetToDoError,\n  onGetToDoSuccess,\n} from \"../state/toDosSlice\"\nimport { pipe } from \"fp-ts/lib/pipeable\"\nimport { task } from \"fp-ts/lib/Task\"\nimport { RootState } from \"../state/rootReducer\"\nimport { fold } from \"fp-ts/lib/TaskEither\"\n\nexport const useFetchToDos = () => {\n  const { toDoApi } = useContext(EnvironmentContext)\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    const fetch = async () => {\n      dispatch(onGetToDosStart())\n      return await pipe(\n        toDoApi.getAll(),\n        fold(\n          error => {\n            dispatch(onGetToDosError(error.message))\n            return task.of(undefined)\n          },\n          toDos => {\n            dispatch(onGetToDosSuccess(toDos))\n            return task.of(undefined)\n          },\n        ),\n      )()\n    }\n    fetch()\n  }, [dispatch, toDoApi])\n\n  const { toDos, loading, error } = useSelector((state: RootState) => state.toDos)\n  return { toDos, loading, error }\n}\n\nexport const useFetchToDo = (id: number) => {\n  const { toDoApi } = useContext(EnvironmentContext)\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    const fetch = async () => {\n      dispatch(onGetToDoStart())\n      return await pipe(\n        toDoApi.getOne(id),\n        fold(\n          error => {\n            dispatch(onGetToDoError(error.message))\n            return task.of(undefined)\n          },\n          toDo => {\n            dispatch(onGetToDoSuccess(toDo))\n            return task.of(undefined)\n          },\n        ),\n      )()\n    }\n    fetch()\n  }, [dispatch, toDoApi, id])\n\n  const { toDo, loading, error } = useSelector((state: RootState) => state.toDos)\n  return { toDo, loading, error }\n}\n"]},"metadata":{},"sourceType":"module"}