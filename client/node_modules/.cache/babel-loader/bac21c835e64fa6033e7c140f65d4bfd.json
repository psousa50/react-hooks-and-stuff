{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * @file `Filterable` represents data structures which can be _partitioned_/_filtered_.\n *\n * Adapted from https://github.com/LiamGoodacre/purescript-filterable/blob/master/src/Data/Filterable.purs\n */\n\nvar Compactable_1 = require(\"./Compactable\");\n\nvar Option_1 = require(\"./Option\");\n\nfunction getFilterableComposition(F, G) {\n  var FC = __assign(__assign({}, Compactable_1.getCompactableComposition(F, G)), {\n    partitionMap: function partitionMap(fga, f) {\n      var left = FC.filterMap(fga, function (a) {\n        return Option_1.getLeft(f(a));\n      });\n      var right = FC.filterMap(fga, function (a) {\n        return Option_1.getRight(f(a));\n      });\n      return {\n        left: left,\n        right: right\n      };\n    },\n    partition: function partition(fga, p) {\n      var left = FC.filter(fga, function (a) {\n        return !p(a);\n      });\n      var right = FC.filter(fga, p);\n      return {\n        left: left,\n        right: right\n      };\n    },\n    filterMap: function filterMap(fga, f) {\n      return F.map(fga, function (ga) {\n        return G.filterMap(ga, f);\n      });\n    },\n    filter: function filter(fga, f) {\n      return F.map(fga, function (ga) {\n        return G.filter(ga, f);\n      });\n    }\n  });\n\n  return FC;\n}\n\nexports.getFilterableComposition = getFilterableComposition;","map":null,"metadata":{},"sourceType":"script"}