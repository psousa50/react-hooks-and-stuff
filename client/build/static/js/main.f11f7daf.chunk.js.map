{"version":3,"sources":["common/actions.ts","api/domain.ts","Environment.ts","state/toDosSlice.ts","components/Home.tsx","api/hooks.ts","components/ToDo.tsx","state/rootReducer.ts","state/store.ts","serviceWorker.ts","index.tsx","components/App.tsx"],"names":["toAction","lazyPromise","tryCatch","error","mapResponse","response","status","v","data","fromEither","right","Error","statusText","left","environment","toDoApi","getOne","id","pipe","axios","get","chain","getAll","map","td","slice","EnvironmentContext","React","createContext","initialState","toDos","toDo","undefined","loading","toDoSlice","createSlice","name","reducers","onGetToDosStart","state","onGetToDosSuccess","action","payload","onGetToDosError","onGetToDoStart","onGetToDoSuccess","onGetToDoError","actions","reducer","Home","useContext","dispatch","useDispatch","useEffect","a","fold","message","task","of","fetch","useSelector","useFetchToDos","todo","key","title","to","pathname","ToDo","useParams","useFetchToDo","parseInt","rootReducer","combineReducers","toDosReducer","store","configureStore","Boolean","window","location","hostname","match","ReactDOM","render","Provider","value","path","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f11f7daf.chunk.js","sourcesContent":["import { left, right } from \"fp-ts/lib/Either\"\nimport { TaskEither, fromEither, tryCatch, chain } from \"fp-ts/lib/TaskEither\"\n\nexport type ActionResult<R = void> = TaskEither<Error, R>\nexport type Action<I = void, R = void> = (i: I) => ActionResult<R>\n\nexport const actionOf = <T>(v: T): ActionResult<T> => fromEither(right(v))\nexport function actionErrorOf<R>(error: Error): ActionResult<R> {\n  return fromEither(left<Error, R>(error))\n}\n\nexport const toAction = <R = void>(lazyPromise: () => Promise<R>) => tryCatch(lazyPromise, error => error as Error)\n\nexport const chainLogTE = <I, R>(m: string, action: Action<I, R>) =>\n  chain((v: I) => {\n    console.log(`${m}=>`, v)\n    return action(v)\n  })\n","import { pipe } from \"fp-ts/lib/pipeable\"\nimport axios, { AxiosResponse } from \"axios\"\nimport { ActionResult, toAction, actionOf, actionErrorOf } from \"../common/actions\"\nimport { chain, map } from \"fp-ts/lib/TaskEither\"\n\nexport interface ToDo {\n  userId: number\n  id: number\n  title: string\n  completed: boolean\n}\n\nconst mapResponse = <T>(response: AxiosResponse<T>): ActionResult<T> => {\n  return response.status < 300 ? actionOf(response.data) : actionErrorOf(new Error(response.statusText))\n}\n\nexport interface ToDoApi {\n  getOne: (id: number) => ActionResult<ToDo>\n  getAll: () => ActionResult<ToDo[]>\n}\n\nexport const toDoApi: ToDoApi = {\n  getOne: id =>\n    pipe(\n      toAction(() => axios.get<ToDo>(`https://jsonplaceholder.typicode.com/todos/${id}`)),\n      chain(mapResponse),\n    ),\n\n  getAll: () =>\n    pipe(\n      toAction(() => axios.get<ToDo[]>(`https://jsonplaceholder.typicode.com/todos`)),\n      chain(mapResponse),\n      map(td => td.slice(0, 10)),\n    ),\n}\n","import React from \"react\"\nimport { toDoApi, ToDoApi } from \"./api/domain\"\n\nexport interface Environment {\n  toDoApi: ToDoApi\n}\n\nexport const environment = {\n  toDoApi,\n}\n\nexport const EnvironmentContext = React.createContext(environment)\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\"\nimport { ToDo } from \"../api/domain\"\n\ninterface ToDoState {\n  toDos: ToDo[]\n  toDo: ToDo | undefined\n  loading: boolean\n  error: string | undefined\n}\n\nconst initialState: ToDoState = {\n  toDos: [],\n  toDo: undefined,\n  loading: false,\n  error: undefined,\n}\n\nconst toDoSlice = createSlice({\n  name: \"ToDos\",\n  initialState,\n  reducers: {\n    onGetToDosStart: state => {\n      state.loading = true\n    },\n    onGetToDosSuccess: (state, action: PayloadAction<ToDo[]>) => {\n      state.toDos = action.payload\n      state.loading = false\n    },\n    onGetToDosError: (state, action: PayloadAction<string>) => {\n      state.error = action.payload\n      state.loading = false\n    },\n    onGetToDoStart: state => {\n      state.loading = true\n    },\n    onGetToDoSuccess: (state, action: PayloadAction<ToDo>) => {\n      state.toDo = action.payload\n      state.loading = false\n    },\n    onGetToDoError: (state, action: PayloadAction<string>) => {\n      state.error = action.payload\n      state.loading = false\n    },\n  },\n})\n\nexport const {\n  onGetToDosStart,\n  onGetToDosSuccess,\n  onGetToDosError,\n  onGetToDoStart,\n  onGetToDoSuccess,\n  onGetToDoError,\n} = toDoSlice.actions\n\nexport const reducer = toDoSlice.reducer\n","import React from \"react\"\nimport { useFetchToDos } from \"../api/hooks\"\nimport { Link } from \"react-router-dom\"\n\nexport const Home: React.FC = () => {\n  const { toDos, loading, error } = useFetchToDos()\n\n  return error ? (\n    <div>{`Error: ${error}`}</div>\n  ) : loading ? (\n    <div>{\"Loading...\"}</div>\n  ) : (\n    <div>\n      <h1>{\"TO DOs\"}</h1>\n      {toDos.map(todo => (\n        <div key={todo.id}>\n          <div>{todo.title}</div>\n          <Link to={{ pathname: `/todo/${todo.id}` }}>{\"Show\"}</Link>\n        </div>\n      ))}\n    </div>\n  )\n}\n","import { useContext, useEffect } from \"react\"\nimport { EnvironmentContext } from \"../Environment\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport {\n  onGetToDosStart,\n  onGetToDosError,\n  onGetToDosSuccess,\n  onGetToDoStart,\n  onGetToDoError,\n  onGetToDoSuccess,\n} from \"../state/toDosSlice\"\nimport { pipe } from \"fp-ts/lib/pipeable\"\nimport { task } from \"fp-ts/lib/Task\"\nimport { RootState } from \"../state/rootReducer\"\nimport { fold } from \"fp-ts/lib/TaskEither\"\n\nexport const useFetchToDos = () => {\n  const { toDoApi } = useContext(EnvironmentContext)\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    const fetch = async () => {\n      dispatch(onGetToDosStart())\n      return await pipe(\n        toDoApi.getAll(),\n        fold(\n          error => {\n            dispatch(onGetToDosError(error.message))\n            return task.of(undefined)\n          },\n          toDos => {\n            dispatch(onGetToDosSuccess(toDos))\n            return task.of(undefined)\n          },\n        ),\n      )()\n    }\n    fetch()\n  }, [dispatch, toDoApi])\n\n  const { toDos, loading, error } = useSelector((state: RootState) => state.toDos)\n  return { toDos, loading, error }\n}\n\nexport const useFetchToDo = (id: number) => {\n  const { toDoApi } = useContext(EnvironmentContext)\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    const fetch = async () => {\n      dispatch(onGetToDoStart())\n      return await pipe(\n        toDoApi.getOne(id),\n        fold(\n          error => {\n            dispatch(onGetToDoError(error.message))\n            return task.of(undefined)\n          },\n          toDo => {\n            dispatch(onGetToDoSuccess(toDo))\n            return task.of(undefined)\n          },\n        ),\n      )()\n    }\n    fetch()\n  }, [dispatch, toDoApi, id])\n\n  const { toDo, loading, error } = useSelector((state: RootState) => state.toDos)\n  return { toDo, loading, error }\n}\n","import React from \"react\"\nimport { useFetchToDo } from \"../api/hooks\"\nimport { useParams } from \"react-router\"\n\nexport const ToDo: React.FC = () => {\n  const { id } = useParams()\n\n  const { toDo, loading } = useFetchToDo(parseInt(id!))\n\n  return !toDo || loading ? (\n    <div>{\"Loading...\"}</div>\n  ) : (\n    <div>\n      <h2>{\"ToDo\"}</h2>\n      <div>{toDo.title}</div>\n    </div>\n  )\n}\n","import { combineReducers } from \"@reduxjs/toolkit\"\nimport { reducer as toDosReducer } from \"./toDosSlice\"\n\nexport const rootReducer = combineReducers({ toDos: toDosReducer })\n\nexport type RootState = ReturnType<typeof rootReducer>\n","import { configureStore } from \"@reduxjs/toolkit\"\nimport { rootReducer } from \"./rootReducer\"\n\nexport const createStore = () => configureStore({ reducer: rootReducer })\n\nexport const store = createStore()\n\nexport type Store = typeof store\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { App } from \"./components/App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import React from \"react\"\nimport { Home } from \"./Home\"\nimport { ToDo } from \"./ToDo\"\nimport { EnvironmentContext, environment } from \"../Environment\"\nimport { Provider } from \"react-redux\"\nimport { store } from \"../state/store\"\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\"\n\nexport const App: React.FC = () => (\n  <EnvironmentContext.Provider value={environment}>\n    <Provider store={store}>\n      <Router>\n        <Switch>\n          <Route path=\"/todo/:id\">\n            <ToDo />\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </Router>\n    </Provider>\n  </EnvironmentContext.Provider>\n)\n"],"sourceRoot":""}